#cloud-config
password: atomic
chpasswd: { expire: False }
ssh_pwauth: True
write_files:
  - encoding: b64
    content: W1VuaXRdCkRlc2NyaXB0aW9uPUNvY2twaXQgV2ViIEludGVyZmFjZQpSZXF1aXJlcz1kb2NrZXIuc2VydmljZQpBZnRlcj1kb2NrZXIuc2VydmljZQoKW1NlcnZpY2VdClJlc3RhcnQ9b24tZmFpbHVyZQpSZXN0YXJ0U2VjPTEwCkV4ZWNTdGFydD0vdXNyL2Jpbi9kb2NrZXIgcnVuIC0tcm0gLS1wcml2aWxlZ2VkIC0tcGlkIGhvc3QgLXYgLzovaG9zdCAtLW5hbWUgJXAgZmVkb3JhL2NvY2twaXR3cyAvY29udGFpbmVyL2F0b21pYy1ydW4gLS1sb2NhbC1zc2gKRXhlY1N0b3A9LS91c3IvYmluL2RvY2tlciBzdG9wIC10IDIgJXAKCltJbnN0YWxsXQpXYW50ZWRCeT1tdWx0aS11c2VyLnRhcmdldAo=
    owner: root:root
    path: /etc/systemd/system/cockpitws.service
    permissions: '0644'
 - path: /root/.dockercfg
   permissions: 0640
   owner: root
   content: |
     {
       "{{ docker_url }}": {
         "auth": "{{ docker_auth }}",
         "email": "{{ docker_email }}"
       },
       "{{ quay_url }}": {
         "auth": "{{ quay_auth }}",
         "email": "{{ quay_email }}"
       }
     }

runcmd:
- [ systemctl, daemon-reload ]
- [ systemctl, enable, cockpitws.service ]
- [ systemctl, start, --no-block, cockpitws.service ]



disk_setup:
  /dev/xvdf:
    table_type: 'mbr'
    layout: True
    overwrite: True


fs_setup:
    filesystem: xfs
    device: ephemeral0
    partition: auto

mounts:
    - [ /dev/xvdf, /srv, auto, "defaults,noexec" ]

write_files:
  - path: /root/.dockercfg
    permissions: 0640
    owner: root
    content: |
      {
        "{{ docker_url }}": {
          "auth": "{{ docker_auth }}",
          "email": "{{ docker_email }}"
        },
        "{{ quay_url }}": {
          "auth": "{{ quay_auth }}",
          "email": "{{ quay_email }}"
        }
      }
  - path: /run/systemd/system/docker.service.d/40-flannel.conf
    permissions: 0640
    owner: root
    content: |
      [Unit]
      Requires=flanneld.service
      After=flanneld.service
  - path: /tmp/generate_flannel_metadata.sh
    permissions: 0640
    owner: root
    content: |
      #!/bin/bash
      CONF_FILE=/run/systemd/system/fleet.service.d/21-metadata.conf
      instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
      instance_type=$(curl -s http://169.254.169.254/latest/meta-data/instance-type)
      az=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
      memory=$(free -m -t | tail -1 | awk '{print $2}')
      processors=$(egrep -c '^processor[[:space:]]+:' /proc/cpuinfo)
      region=$${az::-1}
      sgs=$(curl -s http://169.254.169.254/latest/meta-data/security-groups/ | sed "s/^/sg_/" | sed "s/$/=1/" | tr "\\n", ",")
      echo "[Service]" > $CONF_FILE
      echo "Environment='FLEET_METADATA=instance_id=$${instance_id},instance-type=$${instance_type},az=$${az},memory=$${memory},processors=$${processors},region=$${region},$${sgs}'"  >> $CONF_FILE
      systemctl daemon-reload
  - path: /opt/bin/docker-enter
    permissions: 0755
    owner: root
    content: |
      #!/bin/bash
      all_containers="$(docker ps | rev | awk '{print $1}' | rev | grep -v NAMES)"
      if [[ $# -ne 1 ]] ; then
        echo "ERROR: wrong amount of arguments"
        echo "USAGE: $0 <container-name>"
        echo "List of Currently Running Containers"
        echo $${all_containers} | tr ' ' '\n'
        exit 1
      fi
      container="$1"
      matches="$(echo $${all_containers} | tr ' ' '\n' | grep $${container} | wc -l)"
      if [[ $${matches} -gt 1 ]] ; then
        echo "ERROR: too many matches"
        echo $${all_containers} | tr ' ' '\n' | grep $${container}
        exit 1
      elif [[ $${matches} -lt 1 ]] ; then
        echo "ERROR: not enough matches"
        echo "List of Currently Running Containers"
        echo $${all_containers} | tr ' ' '\n'
        exit 1
      else
        container="$(echo $${all_containers} | tr ' ' '\n' | grep $${container})"
        echo "ENTERING CONTAINER: $${container}"
        docker exec -ti $${container} bash -l
        exit 0
      fi
users:
    - name: wileyj
      groups:
        - sudo
        - docker
      no-create-home: true
